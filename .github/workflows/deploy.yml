name: Run tests,sonarqube,docker and deploy

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging
    types:
    - closed

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean install -DskipTests -Ptest
        
  test:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Maven tests
        run: mvn -B verify -Ptest

      - name: Save test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-files
          path: target/site/jacoco/jacoco.xml

      - name: Save test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports/TEST-*.xml

  sonarqube:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download test coverage report
        uses: actions/download-artifact@v4
        with:
          name: test-coverage-files
          path: target/site/jacoco

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: target/surefire-reports

      - uses: javiertuya/sonarqube-action@main
        with:
          github-token: ${{ vars.SONAR_GITHUB_TOKEN }}
          sonar-token: ${{ vars.SONAR_TOKEN }}
          restore-artifact-name1: "test-coverage-files"
          restore-artifact-name2: "test-results"

  docker:
    runs-on: ubuntu-latest
    needs: test
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ vars.DOCKER_PASSWORD }}

      - name: Determinate Image tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg SPRING_PROFILES_ACTIVE="${{ vars.SPRING_PROFILES_ACTIVE }}" \
            --build-arg PORT="${{ vars.PORT }}" \
            --build-arg APP_VERSION="${{ env.IMAGE_TAG }}" \
            --build-arg APP_SERVER_URL="${{ vars.APP_SERVER_URL }}" \
            --build-arg APP_SECRET="${{ vars.APP_SECRET }}" \
            --build-arg APP_ENVIRONMENT="${{ vars.APP_ENVIRONMENT }}" \
            --build-arg APP_EMAIL_SENDER="${{ vars.APP_EMAIL_SENDER }}" \
            --build-arg APP_EMAIL_PASSWORD="${{ vars.APP_EMAIL_PASSWORD }}" \
            --build-arg SPRING_APPLICATION_NAME="${{ vars.SPRING_APPLICATION_NAME }}" \
            --build-arg SPRING_DATASOURCE_URL="${{ vars.SPRING_DATASOURCE_URL }}" \
            --build-arg SPRING_DATASOURCE_USERNAME="${{ vars.SPRING_DATASOURCE_USERNAME }}" \
            --build-arg SPRING_DATASOURCE_PASSWORD="${{ vars.SPRING_DATASOURCE_PASSWORD }}" \
            --build-arg SPRING_JPA_SHOW_SQL="${{ vars.SPRING_JPA_SHOW_SQL }}" \
            -t "${{ vars.DOCKER_APPLICATION_NAME }}:${{ env.IMAGE_TAG }}" .

      - name: Push Docker image
        run: |
          docker push "${{ vars.DOCKER_APPLICATION_NAME }}:${{ env.IMAGE_TAG }}"

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Authenticate Docker to Google Cloud
        run: |
          gcloud auth configure-docker

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ vars.DOCKER_PASSWORD }}

      - name: Determine Image tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Pull Docker image
        run: docker pull "${{ vars.DOCKER_APPLICATION_NAME }}:${{ env.IMAGE_TAG }}"

      - name: Tag Docker image
        run: |
          docker tag "${{ vars.DOCKER_APPLICATION_NAME }}:${{ env.IMAGE_TAG }}" \
            "gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ vars.DOCKER_APPLICATION_NAME }}:${{ env.IMAGE_TAG }}"

      - name: Push Docker image to GCP
        run: docker push "gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ vars.DOCKER_APPLICATION_NAME }}:${{ env.IMAGE_TAG }}"

      - name: Deploy to GCP Cloud Run
        run: |
          gcloud run deploy ${{ vars.SPRING_APPLICATION_NAME }} \
            --image=gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ vars.DOCKER_APPLICATION_NAME }}:${{ env.IMAGE_TAG }} \
            --platform=managed --region=southamerica-east1 --allow-unauthenticated --revision-suffix=${{ env.IMAGE_TAG }}

      - name: Remove Docker images
        run: |
          docker rmi "${{ vars.DOCKER_APPLICATION_NAME }}:${{ env.IMAGE_TAG }}" \
            "gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ vars.DOCKER_APPLICATION_NAME }}:${{ env.IMAGE_TAG }}"
            